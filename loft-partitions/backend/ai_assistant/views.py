import json
import uuid
import requests
from django.conf import settings
from rest_framework import viewsets, status
from rest_framework.decorators import action
from rest_framework.response import Response
from .models import ChatSession, ChatMessage
from .serializers import ChatSessionSerializer, ChatMessageSerializer

# –û—Ç–∫–ª—é—á–∞–µ–º SSL –ø—Ä–µ–¥—É–ø—Ä–µ–∂–¥–µ–Ω–∏—è –¥–ª—è —Ä–∞–∑—Ä–∞–±–æ—Ç–∫–∏
import urllib3

urllib3.disable_warnings(urllib3.exceptions.InsecureRequestWarning)


class ChatSessionViewSet(viewsets.ModelViewSet):
    """ViewSet –¥–ª—è —Ä–∞–±–æ—Ç—ã —Å —Å–µ—Å—Å–∏—è–º–∏ —á–∞—Ç–∞ —Å GigaChat"""
    queryset = ChatSession.objects.all()
    serializer_class = ChatSessionSerializer

    def get_gigachat_token(self):
        """–ü–æ–ª—É—á–µ–Ω–∏–µ OAuth —Ç–æ–∫–µ–Ω–∞ –¥–ª—è GigaChat API - –†–ê–ë–û–ß–ê–Ø –í–ï–†–°–ò–Ø"""
        try:
            print("üîë –ü–æ–ª—É—á–µ–Ω–∏–µ —Ç–æ–∫–µ–Ω–∞ GigaChat...")

            url = "https://ngw.devices.sberbank.ru:9443/api/v2/oauth"
            payload = 'scope=GIGACHAT_API_PERS'

            headers = {
                'Content-Type': 'application/x-www-form-urlencoded',
                'Accept': 'application/json',
                'RqUID': str(uuid.uuid4()),
                'Authorization': f'Basic {settings.GIGACHAT_API_KEY}'
            }

            response = requests.post(
                url,
                data=payload,
                headers=headers,
                verify=False,
                timeout=30
            )

            print(f"üìä –°—Ç–∞—Ç—É—Å —Ç–æ–∫–µ–Ω–∞: {response.status_code}")

            if response.status_code == 200:
                token_data = response.json()
                access_token = token_data.get('access_token')
                print("‚úÖ –¢–æ–∫–µ–Ω —É—Å–ø–µ—à–Ω–æ –ø–æ–ª—É—á–µ–Ω!")
                return access_token
            else:
                print(f"‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è —Ç–æ–∫–µ–Ω–∞: {response.status_code} - {response.text}")
                return None

        except Exception as e:
            print(f"‚ùå –û—à–∏–±–∫–∞: {e}")
            return None

    def send_message_to_gigachat(self, message, access_token):
        """–û—Ç–ø—Ä–∞–≤–∫–∞ —Å–æ–æ–±—â–µ–Ω–∏—è –≤ GigaChat - –†–ê–ë–û–ß–ê–Ø –í–ï–†–°–ò–Ø"""
        try:
            print("üí¨ –û—Ç–ø—Ä–∞–≤–∫–∞ —Å–æ–æ–±—â–µ–Ω–∏—è –≤ GigaChat...")

            url = "https://gigachat.devices.sberbank.ru/api/v1/chat/completions"

            headers = {
                'Content-Type': 'application/json',
                'Authorization': f'Bearer {access_token}',
                'Accept': 'application/json'
            }

            # –ü—Ä–æ–º–ø—Ç –¥–ª—è AI-–∫–æ–Ω—Å—É–ª—å—Ç–∞–Ω—Ç–∞ –ø–æ –ø–µ—Ä–µ–≥–æ—Ä–æ–¥–∫–∞–º
            system_prompt = """–¢—ã - –ø—Ä–æ—Ñ–µ—Å—Å–∏–æ–Ω–∞–ª—å–Ω—ã–π –∫–æ–Ω—Å—É–ª—å—Ç–∞–Ω—Ç –ø–æ –ª–æ—Ñ—Ç –ø–µ—Ä–µ–≥–æ—Ä–æ–¥–∫–∞–º –∫–æ–º–ø–∞–Ω–∏–∏ "LoftPartitions". 

–û –∫–æ–º–ø–∞–Ω–∏–∏: –ú—ã —Å–ø–µ—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º—Å—è –Ω–∞ –ø—Ä–æ–∏–∑–≤–æ–¥—Å—Ç–≤–µ –∏ —É—Å—Ç–∞–Ω–æ–≤–∫–µ —Å—Ç–µ–∫–ª—è–Ω–Ω—ã—Ö, –¥–µ—Ä–µ–≤—è–Ω–Ω—ã—Ö –∏ –∫–æ–º–±–∏–Ω–∏—Ä–æ–≤–∞–Ω–Ω—ã—Ö –ø–µ—Ä–µ–≥–æ—Ä–æ–¥–æ–∫.

–¢–≤–æ–∏ –∑–∞–¥–∞—á–∏:
1. –ö–æ–Ω—Å—É–ª—å—Ç–∏—Ä–æ–≤–∞—Ç—å –∫–ª–∏–µ–Ω—Ç–æ–≤ –ø–æ –≤—ã–±–æ—Ä—É –ø–µ—Ä–µ–≥–æ—Ä–æ–¥–æ–∫
2. –ó–∞–¥–∞–≤–∞—Ç—å —É—Ç–æ—á–Ω—è—é—â–∏–µ –≤–æ–ø—Ä–æ—Å—ã –æ –ø–æ–º–µ—â–µ–Ω–∏–∏ (—Ç–∏–ø, –ø–ª–æ—â–∞–¥—å, –Ω–∞–∑–Ω–∞—á–µ–Ω–∏–µ)
3. –†–µ–∫–æ–º–µ–Ω–¥–æ–≤–∞—Ç—å –ø–æ–¥—Ö–æ–¥—è—â–∏–µ –º–∞—Ç–µ—Ä–∏–∞–ª—ã –∏ –∫–æ–Ω—Å—Ç—Ä—É–∫—Ü–∏–∏
4. –°–æ–æ–±—â–∞—Ç—å –æ—Ä–∏–µ–Ω—Ç–∏—Ä–æ–≤–æ—á–Ω—ã–µ —Å—Ä–æ–∫–∏ –∏ —Å—Ç–æ–∏–º–æ—Å—Ç—å
5. –ü—Ä–µ–¥–ª–∞–≥–∞—Ç—å –≤—ã–∑–≤–∞—Ç—å –∑–∞–º–µ—Ä—â–∏–∫–∞ –¥–ª—è —Ç–æ—á–Ω–æ–≥–æ —Ä–∞—Å—á–µ—Ç–∞

–ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –ø—Ä–æ–¥—É–∫—Ç–∞—Ö:
- –°—Ç–µ–∫–ª—è–Ω–Ω—ã–µ –ø–µ—Ä–µ–≥–æ—Ä–æ–¥–∫–∏: —Å–æ–≤—Ä–µ–º–µ–Ω–Ω—ã–π –≤–∏–¥, –ø—Ä–æ–ø—É—Å–∫–∞—é—Ç —Å–≤–µ—Ç, –æ—Ç 25,000 —Ä—É–±.
- –î–µ—Ä–µ–≤—è–Ω–Ω—ã–µ –ø–µ—Ä–µ–≥–æ—Ä–æ–¥–∫–∏: —É—é—Ç–Ω—ã–µ, –Ω–∞—Ç—É—Ä–∞–ª—å–Ω—ã–µ, –æ—Ç 35,000 —Ä—É–±. 
- –ö–æ–º–±–∏–Ω–∏—Ä–æ–≤–∞–Ω–Ω—ã–µ –ø–µ—Ä–µ–≥–æ—Ä–æ–¥–∫–∏: —Å—Ç–∏–ª—å–Ω—ã–µ, —Ñ—É–Ω–∫—Ü–∏–æ–Ω–∞–ª—å–Ω—ã–µ, –æ—Ç 42,000 —Ä—É–±.

–í—Å–µ–≥–¥–∞ –±—É–¥—å –≤–µ–∂–ª–∏–≤—ã–º, –ø—Ä–æ—Ñ–µ—Å—Å–∏–æ–Ω–∞–ª—å–Ω—ã–º –∏ –∑–∞–∫–∞–Ω—á–∏–≤–∞–π –æ—Ç–≤–µ—Ç –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏–µ–º —Å–ª–µ–¥—É—é—â–µ–≥–æ —à–∞–≥–∞."""

            payload = {
                "model": "GigaChat",
                "messages": [
                    {
                        "role": "system",
                        "content": system_prompt
                    },
                    {
                        "role": "user",
                        "content": message
                    }
                ],
                "temperature": 0.7,
                "max_tokens": 500
            }

            response = requests.post(
                url,
                json=payload,
                headers=headers,
                verify=False,
                timeout=30
            )

            print(f"üìä –°—Ç–∞—Ç—É—Å –æ—Ç–≤–µ—Ç–∞: {response.status_code}")

            if response.status_code == 200:
                result = response.json()
                ai_response = result['choices'][0]['message']['content']
                print("‚úÖ –°–æ–æ–±—â–µ–Ω–∏–µ —É—Å–ø–µ—à–Ω–æ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ!")
                return ai_response
            else:
                print(f"‚ùå –û—à–∏–±–∫–∞ API: {response.status_code}")
                return f"–ò–∑–≤–∏–Ω–∏—Ç–µ, –ø—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞—â–µ–Ω–∏–∏ –∫ AI. –°—Ç–∞—Ç—É—Å: {response.status_code}"

        except Exception as e:
            print(f"‚ùå –û—à–∏–±–∫–∞: {e}")
            return f"–ò–∑–≤–∏–Ω–∏—Ç–µ, –ø—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞: {str(e)}"

    def create(self, request):
        """–°–æ–∑–¥–∞–Ω–∏–µ –Ω–æ–≤–æ–π —Å–µ—Å—Å–∏–∏ —á–∞—Ç–∞"""
        session_id = str(uuid.uuid4())
        session = ChatSession.objects.create(session_id=session_id)
        serializer = self.get_serializer(session)
        return Response(serializer.data, status=status.HTTP_201_CREATED)

    @action(detail=True, methods=['post'])
    def send_message(self, request, pk=None):
        """–û—Ç–ø—Ä–∞–≤–∫–∞ —Å–æ–æ–±—â–µ–Ω–∏—è AI-–ø–æ–º–æ—â–Ω–∏–∫—É - –†–ê–ë–û–ß–ê–Ø –í–ï–†–°–ò–Ø"""
        session = self.get_object()
        user_message = request.data.get('message', '').strip()

        print(f"üì® –ü–æ–ª—É—á–µ–Ω–æ —Å–æ–æ–±—â–µ–Ω–∏–µ: '{user_message}'")

        if not user_message:
            return Response(
                {'error': '–°–æ–æ–±—â–µ–Ω–∏–µ –Ω–µ –º–æ–∂–µ—Ç –±—ã—Ç—å –ø—É—Å—Ç—ã–º'},
                status=status.HTTP_400_BAD_REQUEST
            )

        # –°–æ—Ö—Ä–∞–Ω—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        user_msg = ChatMessage.objects.create(
            session=session,
            message=user_message,
            is_user=True
        )

        # –ü–æ–ª—É—á–∞–µ–º —Ç–æ–∫–µ–Ω –∏ –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ
        access_token = self.get_gigachat_token()

        if access_token:
            ai_response = self.send_message_to_gigachat(user_message, access_token)
        else:
            ai_response = "–ò–∑–≤–∏–Ω–∏—Ç–µ, –≤ –¥–∞–Ω–Ω—ã–π –º–æ–º–µ–Ω—Ç —Å–µ—Ä–≤–∏—Å –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ."

        # –°–æ—Ö—Ä–∞–Ω—è–µ–º –æ—Ç–≤–µ—Ç AI
        ai_msg = ChatMessage.objects.create(
            session=session,
            message=ai_response,
            is_user=False,
            ai_response={'response': ai_response}
        )

        return Response({
            'user_message': ChatMessageSerializer(user_msg).data,
            'ai_response': ChatMessageSerializer(ai_msg).data
        })